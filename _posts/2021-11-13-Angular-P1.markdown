---
layout: post
title: Initial notes on angular
date: 2021-11-10 08:00:00:00 +0600
description: My initial notes on angular
img: posts/2020-11-21-rack.jpg # Add image post (optional)
fig-caption: None
tags: [development, angular]
---


## Angular versioning

AngularJS (Angular 1) - This is the initial version
Angular2 - it's a complete rewrite to fix Angular1 problems, since then versioning has changed and it now there's angular 12 relased on May 12, 2021


## Installing Angular

1. Download the current LTS version of angular in https://nodejs.org/en/download/
*Note.* it's easier if you install the MSI version, so you don't have to setup PATHS manually for the node or npm commands.
2. Install the latest version of Angular using the following command 
{% highlight shell %}
npm install -g @angular/cli@latest
{% endhighlight %}

## Create a new project

To create a new project, we need to type from the command prompt.
*Note.* The project name cannot have any spaces or the word "test"

{% highlight shell %}
ng new <project name> --no-strict
{% endhighlight %}

The *--no-strict* flag is used to disable some optimizations along with best practices validation. This is to make our life easier in the begining of our development.

### Start the new server ###
We need to get into the folder and run ng serve

{% highlight shell %}
cd my-first-app
ng server
{% endhighlight %}


## What's typescript
Typescript is very similar to javascript because it's an extension of javascript

 1) Typescript cannot be used directly on the browser. Typescript can be compiled to javascript but it cannot be used directly on the browser.
 
 You can install typescript by typing the following command or looking at the [download page] (https://www.typescriptlang.org/download)
 {% highlight shell %}
npm install typescript --save-dev
{% endhighlight %}

 2) It uses static typing. This means that unlike javascript where variables can change type or be created at any point in time. Typescript is more strict and it'll force you to declare your variables and use them according to the declared type.


While this is possible in javascript and it works like an overloaded function ( Numbers will add and strings will concatenate )
 {% highlight javascript %}
function add(a, b) {
    return a + b;
}

const result = add('2', '5')
{% endhighlight %}

With typescript you'd usually declare your types for safety:

{% highlight typescript%}
function add(a: number, b: number) {
    return a + b;
}

const result = add(2, 5);
{% endhighlight %}

 3) it's compiled. Unlike javascript which you can run directly on your browser (which makes it an interpreted language), typescript needs to be compiled before you run it.

 
## Basic typescript

### Primitives
 - number
{% highlight typescript%}
let myNumber: number;
myNumber = 20;
{% endhighlight %}
 - string
{% highlight typescript%}
 let myString: string;
myString = 'some string';
{% endhighlight %}
 
 - boolean
 
{% highlight typescript%}
 let myBoolean: boolean;
myBoolean = false;
{% endhighlight %}
###Complex types
 -  arrays
 
 {% highlight typescript%}
let myArray: string[];
myArray = ['S1', 's2'];
{% endhighlight %}


 - objects 
 
{% highlight typescript%}
 let myHouse: {
    type: string;
    myNumber: number;
};

myHouse = {
    type: 'classic',
    myNumber: 34
}
{% endhighlight %}

### Union types

{% highlight typescript%}
let myUnionType: string | number = 'test';

myUnionType = 4;
{% endhighlight %}

### Type aliases
{% highlight typescript%}
type House = {
    type: string;
    houseNumber: number;
}

let mySecondHouse: House;
{% endhighlight %}

### Generics
{% highlight typescript%}
function myPush <T>(array: T[], value: T) {
    const newArray = [value, ...array];
    return newArray;
}
const demoArray = [1, 2, 3];

const updatedDemoArray = myPush(demoArray, -2);
{% endhighlight %}

### Classes
{% highlight typescript%}
class DifferentHouse {
    type: string;
    size: number;

    constructor(type: string, size: number) {
        this.type = type;
        this.size = size;
    }

    grow(size: number) {
        this.size = size;
    }
}

const mansion = new DifferentHouse('Arch', 45);
mansion.grow(50);
{% endhighlight %}


### Class with constructor 
{% highlight typescript%}
class ShortHouse {

    constructor(private type: string, private size: number) {
        this.type = type;
        this.size = size;
    }

    grow(size: number) {
        this.size = size;
    }
}

const mansion = new ShortHouse('Arch', 45);
mansion.grow(50);
{% endhighlight %}